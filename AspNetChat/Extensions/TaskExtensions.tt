<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace AspNetChat.Extensions
{
	public static class TaskExtensions
	{
<# for (int i = 2; i <= 10; i++)
{ #>
		public static async Task<(<#= string.Join(" ,", Enumerable.Repeat(0, i).Select((_, i) => $"T{i}")) #>)> WhenAll<<#= string.Join(" ,", Enumerable.Repeat(0, i).Select((_, i) => $"T{i}")) #>>(<#= string.Join(" ,", Enumerable.Repeat(0, i).Select((_, i) => $"Task<T{i}> task{i}"))#>)
		{
			var data = new Data2Values<<#= string.Join(" ,", Enumerable.Repeat(0, i).Select((_, i) => $"T{i}")) #>>();

			await Task.WhenAll(
				<#= string.Join(",\r\n\t\t\t\t", Enumerable.Repeat(0, i).Select((_, i) => $"task{i}.ContinueWith(result => data.Item{i} = result.Result)"))#>
				);

			return (<#= string.Join(" ,", Enumerable.Repeat(0, i).Select((_, i) => $"data.Item{i}")) #>);
		}

		private struct Data2Values<<#= string.Join(" ,", Enumerable.Repeat(0, i).Select((_, i) => $"T{i}")) #>>
		{
<# for (int j = 0; j < i; j++)
{ #>
			public T<#= j #> Item<#= j #>;
<# } #>
		}
<# } #>
	}
}