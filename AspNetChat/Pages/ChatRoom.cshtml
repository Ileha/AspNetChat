@page
@using Newtonsoft.Json
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model AspNetChat.Pages.ChatRoomModel
@{
}

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" type="text/css" href="ChatRoom.css">
	<title>Chat Interface</title>
	<script>
		const wsUrl = new URL(`${window.location.origin}/ChatHandler/@(Model.Chat!.Id.ToString("N"))`);
		wsUrl.searchParams.append("userID", "@(Model.ChatUser!.Id.ToString("N"))");
		wsUrl.protocol = "wss";

		console.log(wsUrl.href);

		const socket = new WebSocket(wsUrl.href);

		window.onbeforeunload = function()
		{
			let disconnectURL = new URL(`${window.location.origin}/UserDisconnected/@(Model.Chat!.Id.ToString("N"))`);

			disconnectURL.searchParams.append("userID", "@(Model.ChatUser!.Id.ToString("N"))");

			fetch(disconnectURL.href,
			{
			  method: "POST",
			  headers: {'Content-Type': 'application/json'}
			})

			socket.close(1000, "end of work");
		}

		function sendMessage()
		{
			let message = document.getElementById("chat-input").value;

			if (message === "") 
			{
				alert("Enter message first");
				return;
			}

			let sendURL = new URL(`${window.location.origin}/UserSendMessage/@(Model.Chat!.Id.ToString("N"))`);

			sendURL.searchParams.append("userID", "@(Model.ChatUser!.Id.ToString("N"))");
			sendURL.searchParams.append("message", message);

			fetch(sendURL.href,
			{
			  method: "POST",
			  headers: {'Content-Type': 'application/json'}
			})

			document.getElementById("chat-input").value = "";
		}

		function clearDom(html) {

			while (html.firstChild) {
				html.removeChild(html.firstChild);
			}
		}

		function composeMessages(data)
		{
			let chatContainer = document.getElementById("chat-history");

			clearDom(chatContainer);

			var users = {};

			data.forEach((item) => {

				const isCurrentUser = item.userID === "@(Model.ChatUser!.Id.ToString("N"))";

				switch (item.eventType) {
					case 0: {
					
						let user = { name: item.userName };
						users[item.userID] = user;

						let para = document.createElement("p");

						if (isCurrentUser) {
							para.appendChild(document.createTextNode(`you joined as ${user.name}`));
						}
						else {
							para.appendChild(document.createTextNode(`user joined: ${user.name}`));
						}

						chatContainer.appendChild(para);

					} break;
					case 1: {
					
						let user = users[item.userID];

						let para = document.createElement("p");

						if (isCurrentUser) {
							para.appendChild(document.createTextNode(`${item.message}`));
							para.classList.add('user');
						}
						else {
							para.appendChild(document.createTextNode(`${user.name}: ${item.message}`));
						}

						chatContainer.appendChild(para);
					
					} break;
					case 2: {
					
						let user = users[item.userID];
						delete users[item.userID];

						let para = document.createElement("p");

						if (isCurrentUser) {
							para.appendChild(document.createTextNode(`you disconnected`));
						}
						else {
							para.appendChild(document.createTextNode(`user disconnected: ${user.name}`));
						}

						chatContainer.appendChild(para);

					} break;
					default:
						console.log("value out of range");
				}
			});
		}

		socket.onmessage = function (event) {
			composeMessages(JSON.parse(event.data));

			return false;
		};

		socket.onclose = function (event) {
			if (event.wasClean) {
				console.log(`[close] Connection closed, code=${event.code} reason=${event.reason}`);
			}
			else {
				console.log('[close] Connection interrupted');
			}
		};

		socket.onerror = function (error) {
			console.log(`${error}`);
		};

		window.onload = (event) => {
			composeMessages(JSON.parse(`@(Html.Raw(JsonConvert.SerializeObject(await Model.GetMessageList())))`));
		};

	</script>
</head>

<body>
	<div class="chat-container">
		<div class="chat-history" id="chat-history">
		</div>
		<form onsubmit="sendMessage(); return false;" class="chat-input-container">
			<input type="text" id="chat-input" autocomplete="off" placeholder="Type your message here...">
			<button type="submit">Send</button>
		</form>
	</div>
</body>