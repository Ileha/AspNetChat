<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using Microsoft.Extensions.DependencyInjection;
using Scrutor;
using Autofac;
using Autofac.Builder;

namespace Common.Extensions.DI
{
    public static partial class DIExtensions
    {
<# for (int i = 0; i <= 10; i++)
{ #>
        public static IRegistrationBuilder<
            IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract>, 
            ConcreteReflectionActivatorData, 
            SingleRegistrationStyle> AddFactoryTo<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance>(this ContainerBuilder typeSourceSelector)
            where TInstance : class, TContract
            where TContract : notnull
        {
            return typeSourceSelector
                .RegisterType<AutofacResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance>>()
                .As<IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract>>();
        }
        
        private class AutofacResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance> : IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract> 
            where TInstance : class, TContract
            where TContract : notnull
        {
            private readonly ILifetimeScope _scope;

            public AutofacResolveFactoryContract(ILifetimeScope scope)
            {
                _scope = scope ?? throw new ArgumentNullException(nameof(scope));
            }

            public TContract Create(<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j} param{j}")) #>)
            {
<#if (i > 0)
{
#>
                return new ContainerWrapper(_scope).ResolveWith<TInstance>(parameters: [ <#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"param{j}")) #> ]);
<# }
else 
{
#>
                return new ContainerWrapper(_scope).ResolveWith<TInstance>();
<# } #>
            }
        }

        public static ILifetimeSelector AddFactoryTo<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance>(this IAssemblySelector assemblySelector)
            where TInstance : class, TContract
        {
            return assemblySelector
                .FromAssemblyOf<ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance>>()
                .AddClasses(filter => filter.AssignableTo(typeof(ResolveFactoryContract<<#= string.Join("", Enumerable.Repeat(0, i+1).Select(_ => ",")) #>>)))
                .AsSelf()
                .AsImplementedInterfaces();
        }

        public static void AddFactoryTo<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance>(this IServiceCollection services)
            where TInstance : class, TContract
        {
            services.AddSingleton<IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract>, ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance>>(x => new ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance>(x));
        }

        public class ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract, TInstance> : IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TContract>
			where TInstance : class, TContract
		{
			private readonly IServiceProvider _serviceProvider;

			public ResolveFactoryContract(IServiceProvider serviceProvider)
			{
				_serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
			}

			public TContract Create(<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j} param{j}")) #>)
			{
<#if (i == 0)
{
#>
                return _serviceProvider.ResolveWith<TInstance>();
<#}
else 
{
#>
                return _serviceProvider.ResolveWith<TInstance>(parameters: new object[] { <#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"param{j}")) #> });
<# } #>
			}
		}

        public static IRegistrationBuilder<
            IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TInstance>, 
            ConcreteReflectionActivatorData, 
            SingleRegistrationStyle> AddFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TInstance>(this ContainerBuilder typeSourceSelector)
            where TInstance : class
        {
            return typeSourceSelector
                .RegisterType<AutofacResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TInstance, TInstance>>()
                .As<IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>TInstance>>();
        }

		public static ILifetimeSelector AddFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>(this IAssemblySelector assemblySelector)
            where T : class
        {
            return assemblySelector
                .FromAssemblyOf<ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T, T>>()
                .AddClass<ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T, T>>()
                .As<IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>>();
        }

        public static void AddFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>(this IServiceCollection services)
            where T : class
        {
            services.AddSingleton<IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>, ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T, T>>(x => new ResolveFactoryContract<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T, T>(x));
        }

        public static void AddFactoryFromMethod<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>(this IServiceCollection services, Func<IServiceProvider, <#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T> func)
        {
            services.AddSingleton<IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>, FactoryFromMethod<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>>(x => new FactoryFromMethod<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>(x, func));
        }

        private class FactoryFromMethod<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T> : IFactory<<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T>
        {
            private readonly IServiceProvider _serviceProvider;
            private readonly Func<IServiceProvider, <#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#> T> _func;

            public FactoryFromMethod(
                IServiceProvider serviceProvider,
                Func<IServiceProvider, <#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j}")) #><#= i==0 ? "" : ", "#>T> func)
            {
                _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
                _func = func ?? throw new ArgumentNullException(nameof(func));
            }

            public T Create(<#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"P{j} param{j}")) #>)
            {
                return _func.Invoke(_serviceProvider<#= i==0 ? "" : ", "#><#= string.Join(", ", Enumerable.Repeat(0, i).Select((_, j) => $"param{j}")) #>);
            }
        }

<# } #>
    }
}